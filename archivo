#include <conio.h>
#include <iostream>
using namespace std;

class CPunto
{
private:
	int x, y;
public:
	CPunto(int px, int py)
	{
		x = px;
		y = py;
	}
	CPunto()
	{

	}
	~CPunto()
	{
		x = y = 0;
	}
	void Print()
	{
		cout << "(" << x << "," << y << ")" << endl;
	}
	template <class U> friend class AVLTree;
};

template <class T>
class CNodo
{
private:
	CNodo<T>*left;
	CNodo<T>*right;
	T key;
	int height;
public:
	CNodo(T e)
	{
		left = right = nullptr;
		key = e;
		height = -1;
	}
	~CNodo()
	{
		left = right = nullptr;
		
		height = -1;
	}
	void nPrint()
	{
		key.Print();
	}
	template <class U> friend class AVLTree;
};

template <class T>
class AVLTree
{
private:
	CNodo<T>*root;
public:
	AVLTree()
	{
		root = nullptr;
	}
	~AVLTree()
	{
		root = nullptr;
	}
	void rotateleft(CNodo<T>*x, CNodo<T>*&y, CNodo<T>*&r)
	{
		r = y;
		x->right = y->left;
		r->left = x;
	}
	void rotateright(CNodo<T>*&x, CNodo<T>*y, CNodo<T>*&r)
	{
		r = x;
		y ->left = x->right;
		r->right = y;
	}
	int altura(CNodo<T>*aux)
	{
		if (aux == NULL)
		{
			return -1;
		}
		else
		{
			return aux->height;
		}
	}

	void _Insert(CNodo<T>*&aux, T e)
	{
		Sift(aux,e);
		Ordenar(aux);
	}

	void Sift(CNodo<T>*&aux, T e)
	{
		if (aux == NULL)
		{
			aux = new CNodo<T>(e);
		}
		else {
			if (aux->key.x > e.x)
			{
				_Insert(aux->left, e);
			}
			else
			{
				if (aux->key.x < e.x)
				{
					_Insert(aux->right, e);
				}
				else
				{
					if (aux->key.y > e.y)
					{
						_Insert(aux->left, e);
					}
					else
					{
						if (aux->key.y < e.y)
						{
							_Insert(aux->right, e);
						}
					}
				}
			}
		}
	}
	void Ordenar(CNodo<T>*&aux)
	{
		int hi = altura(aux->left);
		int hd = altura(aux->right);
		aux->height = ((hd > hi) ? hd : hi) + 1;
		int d = hd - hi;
		if (d > 1)
		{
			int hni = altura(aux->right->left);
			int hnd = altura(aux->right->right);
			if (hni > hnd)
			{
				rotateright(aux->right->left, aux->right, aux->right);
			}
			rotateleft(aux, aux->right, aux);
			Ordenar(aux->right);
			Ordenar(aux->left);
			hd = altura(aux->right);
			hi = altura(aux->left);
			aux->height = ((hd > hi) ? hd : hi) + 1;
		}
		else
		{
			if (d < -1)
			{
				int hni = altura(aux->left->left);
				int hnd = altura(aux->left->right);
				if (hnd > hni)
				{
					rotateleft(aux->left, aux->left->right, aux->left);
				}
				rotateright(aux->left, aux, aux);
				Ordenar(aux->right);
				Ordenar(aux->left);
				hd = altura(aux->right);
				hi = altura(aux->left);
				aux->height = ((hd > hi) ? hd : hi) + 1;
			}
		}
	}

	void _InOrder(CNodo<T>*aux)
	{
		if (aux == NULL)
		{return;}
		_InOrder(aux->left);
		aux->nPrint();
		_InOrder(aux->right);
	}
	void InOrder()
	{
		_InOrder(root);
	}
	void Insert(T e)
	{
		_Insert(root, e);
	}

	void removenodo(CNodo<T>*&aux, T e)
	{
		if (aux == NULL)
		{
			return;
		}

		if (aux->key.x > e.x)
		{
			removenodo(aux->left, e);
		}
		else if (aux->key.x < e.x)
		{
			removenodo(aux->right, e);
		}
		else if (aux->key.y > e.y)
		{
			removenodo(aux->left, e);
		}
		else if (aux->key.y < e.y)
		{
			removenodo(aux->right, e);
		}
		else
		{
			if (aux->right == NULL || aux->left == NULL)
			{
				CNodo<T>*temp = aux->left ? aux->left : aux->right;
				if (temp == NULL)
				{
					temp = aux;
					aux = NULL;
				}
				else
				{
					*aux = *temp;
				}
				temp = nullptr;
			}
			else
			{
				CNodo<T>*temp = hallarmin(aux->right);
				aux->key = temp->key;
				removenodo(aux->right, temp->key);
			}
		}
		if (aux == NULL)
		{
			return;
		}

		Ordenar(aux);

		return;
	}

	void RealRemove(T e)
	{
		removenodo(root, e);
	}
	CNodo<T>* hallarmin(CNodo<T>*aux)
	{
		if (aux->left!=NULL)
		{
			return hallarmin(aux->left);
		}
		else
		{
			return aux;
		}
	}
};

int main()
{
	AVLTree<CPunto>*tree = new AVLTree<CPunto>();
	tree->Insert(CPunto(1, 1));
	tree->Insert(CPunto(1, 2));
	tree->Insert(CPunto(1, 3));
	tree->Insert(CPunto(2, 1));
	tree->Insert(CPunto(1, 0));
	tree->Insert(CPunto(3, 2));
	tree->Insert(CPunto(7, 4));

	tree->InOrder();

	cout << endl;
	tree->RealRemove(CPunto(2, 1));
	tree->RealRemove(CPunto(3, 2));
	tree->InOrder();

	
	_getch();
	return 0;
}
