//CLASE ARBOL 
#pragma once
#include "Nodo.h"
template<class T>
class ArbolAvl
{
public:
	ArbolAvl()
	{
		raiz = nullptr;
		A = false;
	}

	void insertar(T e)
	{
		_insertar(raiz, e);
	}
	void inOrden()
	{

		_inOrden(raiz);
	}
	void deletenodo(T e)
	{
		_deleteNode(raiz, _Findnodo(raiz, e));
	}
	void buscar(T n)
	{
		Buscar(raiz, n);
		if (A == true)
			cout << "Nivel inCompleto:" << endl;
		else
			cout << "Nivel Completo" << endl;
	}

private:
	Nodo<T>* raiz;
	int direccion;
	bool A;

	void imprimir(Nodo<T>* nodo)
	{
		char*a0 = "  ";
		char*a1 = "        ";
		char*a2 = "             ";
		char*a3 = "                  ";
		char*a4 = "                       ";
 		char*a5 = "                             ";
		switch (nodo->height)
		{
		case 0: cout << " " << a0 << nodo->key << "(" << nodo->height << ")" << endl << endl;  break;
		case 1: cout << " " << a1 << nodo->key << "(" << nodo->height << ")" << endl << endl;  break;
		case 2: cout << " " << a2 << nodo->key << "(" << nodo->height << ")" << endl << endl;  break;
		case 3: cout << " " << a3 << nodo->key << "(" << nodo->height << ")" << endl << endl;  break;
		case 4: cout << " " << a4 << nodo->key << "(" << nodo->height << ")" << endl << endl;  break;
		case 5: cout << " " << a5 << nodo->key << "(" << nodo->height << ")" << endl << endl;  break;
		}
	}
	void _inOrden(Nodo<T>*& nodo)
	{
		if (nodo == nullptr) return;
		_inOrden(nodo->izquierda);
		imprimir(nodo);
		_inOrden(nodo->derecha);

	}

	void _insertar(Nodo<T>*& nodo, T e)
	{
		if (nodo == nullptr)
		{
			nodo = new Nodo<T>(e);
			nodo->key = e;
		}
		else if (e > nodo->key)
		{
			_insertar(nodo->derecha, e);
			if (nodo->derecha->key == e)
			{
				nodo->derecha->padre = nodo;
			}
		}
		else if (e < nodo->key)
		{
			_insertar(nodo->izquierda, e);
			if (nodo->izquierda->key == e)
			{
				nodo->izquierda->padre = nodo;
			}
		}
		balancear(nodo);
	}
	int _altura(Nodo<T>* nodo) {
		if (nodo == nullptr)
			return -1;
		else
			return nodo->height;
	}
	void _deleteNode(Nodo<T>* &nodo, T e) {
		if (nodo == NULL)
			return;
		else if (e > nodo->key)
		{
			_deleteNode(nodo->derecha, e);
		}
		else if (e < nodo->key)
		{
			_deleteNode(nodo->izquierda, e);
		}
		else
		{
			if (nodo->derecha == NULL || nodo->izquierda == NULL)
			{
				Nodo<T>*aux = nodo->izquierda ? nodo->izquierda : nodo->derecha;
				if (aux == NULL)
				{
					aux = nodo;
					nodo = NULL;
				}
				else
					*nodo = *aux;
				free(aux);
			}
			else
			{
				Nodo<T>* aux = MinimoNodo(nodo->derecha);
				nodo->key = aux->key;
				_deleteNode(nodo->derecha, aux->key);
			}
		}
		if (nodo == NULL)
			return;
		balancear(nodo);
		return;
	}

	Nodo<T>* MinimoNodo(Nodo<T>*aux)
	{
		if (aux->izquierda != NULL)
			return MinimoNodo(aux->izquierda);
		else
		{
			return aux;
		}
	}

	T _Findnodo(Nodo<T>*nodo,T e)
	{
		if (nodo == NULL)
		{
			return -1;
		}
		if (e == nodo->key)
		{
			if (nodo->padre != NULL)
			{
				return nodo->padre->key;
			}
			else
			{
				return -1;
			}
		}
		if (e < nodo->key)
		{
			return _Findnodo(nodo->izquierda, e);
		}
		if (e > nodo->key)
		{
			return _Findnodo(nodo->derecha, e);
		}

	}
	void Buscar(Nodo<T>*nodo, T n)
	{
		int nivel = n + 1;
		if (nodo == nullptr)return;

		Buscar(nodo->derecha, n);
		if (nodo->height - nivel == -1  nodo->height - nivel == 0)
		{
			if (nodo->derecha == nullptr  nodo->izquierda == nullptr)
			{
				A = true;
			}

		}
		Buscar(nodo->izquierda, n);
	}
	void balancear(Nodo<T>*& nodo)
	{
		int hi = _altura(nodo->izquierda);
		int hd = _altura(nodo->derecha);
		nodo->height = 1 + ((hi > hd) ? hi : hd);
		int d = hd - hi;
		if (d > 1) // pesado derecha
		{
			int hnd = _altura(nodo->derecha->derecha);
			int hni = _altura(nodo->derecha->izquierda);
			if (hni > hnd)
			{
				_rotarDer(nodo->derecha->izquierda, nodo->derecha, nodo->derecha);
			}
			_rotarIzq(nodo, nodo->derecha, nodo);
			nodo->padre = NULL;
			balancear(nodo->izquierda);
			balancear(nodo->derecha);
			hi = _altura(nodo->izquierda);
			hd = _altura(nodo->derecha);
			nodo->height = 1 + ((hi > hd) ? hi : hd);
		}
		else if (d < -1)
		{
			int hnd = _altura(nodo->izquierda->derecha);
			int hni = _altura(nodo->izquierda->izquierda);
			if (hnd>hni)// pesado a la izquierda
			{
				_rotarIzq(nodo->izquierda, nodo->izquierda->derecha, nodo->izquierda);
			}
			_rotarDer(nodo->izquierda, nodo, nodo);
			balancear(nodo->izquierda);
			balancear(nodo->derecha);
			hi = _altura(nodo->izquierda);
			hd = _altura(nodo->derecha);
			nodo->height = 1 + ((hi > hd) ? hi : hd);
		}
		//------------------------------------------------------------------------------------
		if (nodo->derecha != NULL)
		{
			if (nodo->derecha != NULL)
			{
				nodo->derecha->padre = nodo;
			}																			
			if (nodo->derecha->derecha != NULL)											
			{																			
				nodo->derecha->derecha->padre = nodo->derecha;
			}
			if (nodo->derecha->izquierda != NULL)
			{
				nodo->derecha->izquierda->padre = nodo->derecha;
			}
		}
		if (nodo->izquierda != NULL)
		{
			if (nodo->izquierda != NULL)
			{
				nodo->izquierda->padre = nodo;
			}
			if (nodo->izquierda->izquierda != NULL)
			{
				nodo->izquierda->izquierda->padre = nodo->izquierda;
			}

			if (nodo->izquierda->derecha != NULL)
			{
				nodo->izquierda->derecha->padre = nodo->izquierda;
			}
		}	
		nodo->padre = NULL;
	}
	void _rotarDer(Nodo<T>*& x, Nodo<T>* y, Nodo<T>*& p)
	{
		p = x;
		y->izquierda = x->derecha;
		p->derecha = y;
	}
	void _rotarIzq(Nodo<T>*x, Nodo<T>*& y, Nodo<T>*& p)
	{
		p = y;
		x->derecha = y->izquierda;
		p->izquierda = x;
	}
};
//--------------------------------------------------------------------------------------------

//MAIN
#include <iostream>
#include "conio.h"
#include "Arbol.h"

using namespace std;
using namespace System;




int main()
{
	ArbolAvl<int>* arbol = new ArbolAvl<int>();

	arbol->insertar(60);
	arbol->insertar(50);
	arbol->insertar(55);
	arbol->insertar(40);
	arbol->insertar(65);
	arbol->insertar(45);
	arbol->insertar(51);
	arbol->insertar(52);

	arbol->insertar(61);
	arbol->insertar(59);
	arbol->insertar(33);
	arbol->insertar(42);
	arbol->insertar(62);
	arbol->insertar(44);
	arbol->insertar(58);
	arbol->insertar(21);


	arbol->inOrden();
	cout << "/////////////////" << endl;
	arbol->deletenodo(51);	
	arbol->deletenodo(55);
	arbol->deletenodo(44);
	arbol->deletenodo(61);
	arbol->deletenodo(52);
	arbol->inOrden();
	cout << "/////////////////" << endl;

	system("pause");
}
//////////////////////////////////////////////////
//CLASE NODO
#pragma once
#include <iostream>
#include "conio.h"
#include "Arbol.h"

using namespace std;
using namespace System;
template<class T>
class Nodo
{
public:
	Nodo(T key)
	{
		izquierda = nullptr;
		derecha = nullptr;
		this->key = key;
		height = 0;
		padre = nullptr;
	}
	~Nodo()
	{
		izquierda = nullptr;
		derecha = nullptr;
		key = NULL;
	}
private:
	int height;
	T key;
	Nodo* izquierda;
	Nodo* derecha;
	Nodo* padre;
	template<class U> friend class ArbolAvl;
};
